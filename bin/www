#!/usr/bin/env node

/**
 * Module dependencies.
 */

var app = require('../app');
var debug = require('debug')('luanvan:server');
var http = require('http');

var mysql = require('mysql');
var connection = mysql.createConnection({
  host     : 'localhost',
  user     : 'root',
  password : '',
  database : 'hotro_hoctap'
});
/**
 * Get port from environment and store in Express.
 */

var port = normalizePort(process.env.PORT || '3000');
app.set('port', port);

/**
 * Create HTTP server.
 */

var server = http.createServer(app);
var io = require('socket.io')(server);

io.on('connection',function(client){

  idUser = 0;
  // list User
  client.on('user',function(data){
    connection.query("SELECT * FROM chatting WHERE idUser ="+data['id'],function(dsa,check){
      idUser = data['id'];
      if(check[0] === undefined ){
        connection.query('INSERT INTO chatting VALUES(null,?,?)',[data['id'], data['ten'] ]);
      }
    });
    connection.query("SELECT * FROM chatting", function(er,users){
      client.emit('user', users );
      //client.broadcast.emit('user', users );
    });
  })

  client.on('mgs',function(data){

    client.broadcast.emit('mgs',{ mgs : data.mgs , time : data.time, ten : data.ten})
  });

  // client.on('disconnect', function() {
  //   connection.query("DELETE FROM chatting WHERE idUser ="+idUser);
  //   connection.query("SELECT * FROM chatting",function(er,data){
  //     client.broadcast.emit('user', data );
  //   });
  // });
})

/**
 * Listen on provided port, on all network interfaces.
 */

server.listen(port);
server.on('error', onError);
server.on('listening', onListening);


/**
 * Normalize a port into a number, string, or false.
 */

function normalizePort(val) {
  var port = parseInt(val, 10);

  if (isNaN(port)) {
    // named pipe
    return val;
  }

  if (port >= 0) {
    // port number
    return port;
  }

  return false;
}

/**
 * Event listener for HTTP server "error" event.
 */

function onError(error) {
  if (error.syscall !== 'listen') {
    throw error;
  }

  var bind = typeof port === 'string'
    ? 'Pipe ' + port
    : 'Port ' + port;

  // handle specific listen errors with friendly messages
  switch (error.code) {
    case 'EACCES':
      console.error(bind + ' requires elevated privileges');
      process.exit(1);
      break;
    case 'EADDRINUSE':
      console.error(bind + ' is already in use');
      process.exit(1);
      break;
    default:
      throw error;
  }
}

/**
 * Event listener for HTTP server "listening" event.
 */

function onListening() {
  var addr = server.address();
  var bind = typeof addr === 'string'
    ? 'pipe ' + addr
    : 'port ' + addr.port;
  debug('Listening on ' + bind);
}
